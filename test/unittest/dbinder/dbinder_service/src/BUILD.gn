# Copyright (C) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../../config.gni")

IPC_CORE_ROOT = "$IPC_ROOT_PATH/ipc/native"
MODULE_OUTPUT_PATH = "ipc/ipc"

template("ipc_dbinder_unittest") {
  ohos_unittest(target_name) {
    module_out_path = MODULE_OUTPUT_PATH

    include_dirs = [
      "$IPC_ROOT_PATH/ipc/native/src/core/invoker/include",
      "$IPC_ROOT_PATH/ipc/native/src/core/dbinder/include",
      "$IPC_ROOT_PATH/ipc/native/src/core/framework/include",
      "$IPC_ROOT_PATH/ipc/native/c/manager/include",
      "$IPC_ROOT_PATH/utils/include",
      "$IPC_ROOT_PATH/interfaces/innerkits/ipc_core/include",
      "$IPC_ROOT_PATH/ipc/native/c/rpc/include",
      "$IPC_ROOT_PATH/utils/include",
      "$IPC_UNITTEST_ROOT_PATH/mock",
    ]

    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    configs = [ "$IPC_ROOT_PATH/config:ipc_util_config" ]

    deps = [
      "$IPC_CORE_ROOT/src/core:ipc_common",
      "$IPC_ROOT_PATH/interfaces/innerkits/ipc_single:ipc_single_test",
    ]

    defines = [
      "private = public",
      "protected = public",
    ]

    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    external_deps = [
      "c_utils:utils",
      "googletest:gmock",
      "hilog:libhilog",
      "hitrace:libhitracechain",
      "ipc:libdbinder",
      "samgr:samgr_proxy",
    ]

    if (hiviewdfx_hisysevent_support) {
      external_deps += [ "hisysevent:libhisysevent" ]
    }

    if (defined(invoker.external_deps)) {
      external_deps += invoker.external_deps
    }

    sources = invoker.sources
    ldflags = [ "-lpthread" ]
    resource_config_file = "$IPC_ROOT_PATH/test/resource/ipc/ohos_test.xml"
  }
}

ipc_dbinder_unittest("DBinderRemoteListenerTest") {
  sources = [ "dbinder_remote_listener_unittest.cpp" ]
}

ipc_dbinder_unittest("DBinderServiceStubTest") {
  sources = [ "dbinder_service_stub_unittest.cpp" ]
}

ipc_dbinder_unittest("DBinderServiceTest") {
  sources = [ "dbinder_service_unittest.cpp" ]
}

ipc_dbinder_unittest("DBinderDeathRecipientTest") {
  sources = [ "dbinder_death_recipient_unittest.cpp" ]
}

ipc_dbinder_unittest("DBinderSaDeathRecipientTest") {
  sources = [ "dbinder_sa_death_recipient_unittest.cpp" ]
}

###############################################################################
group("unittest") {
  testonly = true
  deps = [
    ":DBinderRemoteListenerTest",
    ":DBinderServiceStubTest",
    ":DBinderServiceTest",
    ":DBinderDeathRecipientTest",
    ":DBinderSaDeathRecipientTest",
  ]
}
###############################################################################
